#!/bin/bash
#
# [QuickBox ARM64 WebDAV Installer]
#
# GitHub:   https://github.com/amefs/quickbox-arm64
# Author:   Amefs
# Current version:  v1.1.0
# URL:
# Original Repo:    https://github.com/QuickBox/QB
# Credits to:       QuickBox.io
#
#   Licensed under GNU General Public License v3.0 GPL-3 (in short)
#
#   You may copy, distribute and modify the software as long as you track
#   changes/dates in source files. Any modifications to our software
#   including (via compiler) GPL-licensed code must also be made available
#   under the GPL along with build & install instructions.
#
#################################################################################
################################################################################
# HELP FUNCTIONS
################################################################################
export NEWT_COLORS='
root=,black
window=,lightgray
shadow=,color8
title=color8,
checkbox=,magenta
entry=,color8
label=blue,
actlistbox=,magenta
actsellistbox=,magenta
helpline=,magenta
roottext=,magenta
emptyscale=magenta
disabledentry=magenta,
'

_norm=$(tput sgr0)
_red=$(tput setaf 1)
_green=$(tput setaf 2)
_tan=$(tput setaf 3)
_cyan=$(tput setaf 6)

function _execute() {
	($1 >>"${OUTTO}" 2>&1)
}
function _print() {
	printf "${_norm}%s${_norm}\n" "$@"
	printf "%s\n" "$@" >>"${OUTTO}"
}
function _info() {
	printf "${_cyan}➜ %s${_norm}\n" "$@"
	printf ">> Info: %s\n" "$@" >>"${OUTTO}"
}
function _success() {
	printf "${_green}✓ %s${_norm}\n" "$@"
	printf ">> Success: %s\n" "$@" >>"${OUTTO}"
}
function _warning() {
	printf "${_tan}⚠ %s${_norm}\n" "$@"
	printf ">> Warning: %s\n" "$@" >>"${OUTTO}"
}
function _error() {
	printf "${_red}✗ %s${_norm}\n" "$@"
	printf ">> Error: %s\n" "$@" >>"${OUTTO}"
}

#################################################################################
# APP VARIABLE
#################################################################################
APP_TITLE="WebDAV"
APP_NAME="webdav"
APP_SERVICE="webdav"
APP_BASEDEPS=""
APP_DAEMON_PORT="15400"

OUTTO=/srv/dashboard/db/output.log
username=$(cat /root/.admin.info | cut -d: -f1)

################################################################################
# SCRIPT FUNCTIONS
################################################################################
function _usage() {
	echo -e "\nQuickBox ARM64 $APP_TITLE Installer"
	echo -e "\nUsage: \n$(basename "$0") [-gh] [-l logfile] [-u username] [-v version]"
	echo -e "\nOptions:\n"
	echo "-g, --gui                 use a menu configuration to install"
	echo "-l, --log <logfile>       specific log file"
	# not required by multi-user applications
	echo "-u, --user <username>     the user for this installer"
	echo "-v, --version <version>   the application version you want to install"
	echo ""
	echo "-h, --help                display this help and exit"
}
################################################################################
# INSTALL FUNCTIONS
################################################################################
function _lockCheck() {
	if [[ -f "/install/.${username}.${APP_NAME}.lock" ]]; then
		prevApp=$(cat /install/.install.lock)
		_info "$prevApp process running."
		_info "If you believe this to be in error, please manually remove the /install/.install.lock"
		_error "Exiting..."
		exit 1
	fi
}
function _setLock() {
	echo "${APP_TITLE}" >/install/.install.lock
}
function _lockCleanup() {
	echo "$APP_TITLE Install Complete!


Close this dialog box to refresh your browser" >>"${OUTTO}" 2>&1
	rm -f /install/.install.lock
}

function _installInfo() {
	_print "
$APP_TITLE will now be installed.

This process may take a few minutes
Please wait until the process is completed
"
}

function _installSystemUpdates() {
	_info "Checking and performing updates to system... "
	DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
	DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >/dev/null 2>&1
	## auto solve lock
	if [ "$?" -eq 2 ]; then
		_warning "dpkg database is locked."
		_info "fixing dpkg lock..."
		rm -f /var/lib/dpkg/updates/0*
		locks=$(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*)
		if [[ ${locks} == $(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*) ]]; then
			for l in ${locks}; do
				rm -rf ${l}
			done
			_execute "dpkg --configure -a"
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >/dev/null 2>&1
		fi
		if ! (apt-get check >/dev/null); then
			apt-get install -f >>"${OUTTO}" 2>&1
			if ! (apt-get check >/dev/null); then
				whiptail --title "$ERROR_TITLE_INSTALL" --msgbox "$ERROR_TEXT_INSTALL_1" --ok-button "$BUTTON_OK" 8 72
				exit 1
			fi
		fi
	fi
	_success "System updated."
}

function _installApp() {
	if [[ -z "$(rclone --version 2> /dev/null | awk 'NR==1{print $2}')" ]]; then
		_info "Installing ${APP_TITLE}..."
		cd /tmp || exit 1
		_execute "curl -o rclone.sh https://rclone.org/install.sh"
		_execute "chmod +x rclone.sh"
		/tmp/rclone.sh >>"${OUTTO}" 2>&1
		_success "${APP_TITLE} installed."
	else
		_success "${APP_TITLE} already installed, Skipping."
	fi
}

function _configureApp() {
	_info "Configuring ${APP_TITLE}..."
    cat >/etc/nginx/apps/${username}.webdav.conf <<EOF
location /dav {
  return 301 /dav/;
}

location /dav/ {
    client_max_body_size 0;
    auth_basic "Password Required";
    auth_basic_user_file /etc/htpasswd.d/htpasswd.\$remote_user;
    proxy_request_buffering on;
    proxy_redirect off;
    proxy_pass http://127.0.0.1:${APP_DAEMON_PORT}/dav/;
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host \$http_host;
    proxy_set_header X-Real-IP \$remote_addr;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
}
EOF

	cat >/etc/systemd/system/webdav@${username}.service <<EOF
[Unit]
Description=Rclone WebDAV Service
After=network-online.target

[Service]
Type=simple
User=${username}
Group=${username}
UMask=002
ExecStart=/usr/bin/rclone serve webdav /home/${username} \\
          --addr 127.0.0.1:${APP_DAEMON_PORT} \\
          --baseurl /dav \\
          --dir-cache-time 0 \\
          --poll-interval 0
Restart=on-abort

[Install]
WantedBy=multi-user.target
EOF
	_execute "systemctl daemon-reload"
	_execute "nginx -s reload"
	_success "${APP_TITLE} configured."
}

function _installAppLock() {
	_info "Configuring ${APP_TITLE} lock..."
    	touch /install/.${username}.${APP_NAME}.lock
	_success "${APP_TITLE} lock configured."
}

function _installAppStart() {
	_info "Starting ${APP_TITLE}..."
	_execute "systemctl enable ${APP_SERVICE}@${username}"
	_execute "systemctl start ${APP_SERVICE}@${username}"
	_success "${APP_TITLE} started."
}

#################################################################################
# OPT GENERATOR
#################################################################################
if ! ARGS=$(getopt -a -o hl:u: -l help,log:,user: -- "$@")
then
    _usage
    exit 1
fi
eval set -- "${ARGS}"
while true; do
	case "$1" in
	-h | --help)
		_usage
		exit 1
		;;
	-l | --log)
		OUTTO="$2"
		shift
		;;
	-u | --user)
		username="$2"
		shift
		;;
	--)
		shift
		break
		;;
	esac
	shift
done

#################################################################################
# MAIN PROCESS
#################################################################################
_lockCheck
_setLock
_installInfo
_installSystemUpdates
_installApp
_configureApp
_installAppLock
_installAppStart
_lockCleanup
